package main;

import java.util.ArrayList;
import java.util.List;

import edu.uci.ics.jung.graph.util.EdgeType;
import edu.uci.ics.jung.graph.util.Pair;
import gui.SimulatorConstants;

import model.Algorithm;
import model.Request;
import model.RequestLinkFactory;
import model.RequestNodeFactory;
import model.Simulation;
import model.Substrate;
import model.components.Node;
import model.components.Node.Location;
import model.components.RequestLink;
import model.components.RequestRouter;
import model.components.RequestSwitch;
import model.components.Server;
import model.components.SubstrateLink;
import model.components.SubstrateRouter;
import model.components.SubstrateSwitch;
import model.components.VirtualMachine;

public class MainFEDERICAWithoutGUI {

	public static void main(String[] args) {
		
		// jra23 Request (based on a real FEDERICA slice)
		Request request = new Request("jra23Request");
		List<Request> requests = new ArrayList<Request>();
		requests.add(request);
		// FEDERICA substrate
	    Substrate substrate = new Substrate("FEDERICA");
	    Algorithm algorithm = new Algorithm("rVine");
	    
	    // Hardcoded Request
	    request.setStartDate(0);
	    request.setEndDate(12);
	    // Nodes and links of the request are generated by random factories
	    RequestNodeFactory nodeFactory = new RequestNodeFactory();
	    RequestLinkFactory linkFactory = new RequestLinkFactory();
	    request.setNodeFactory(nodeFactory);
	    request.setLinkFactory(linkFactory);
	     
	    // router0
	    RequestRouter r0 = (RequestRouter) nodeFactory.create("router");
//	    router0.setCpu(20);
//	    router0.setMemory(20);
	    // router1
	    RequestRouter r1 = (RequestRouter) nodeFactory.create("router");
//	    r1.setCpu(20);
//	    r1.setMemory(20);
	    // sw0
	    RequestSwitch sw0 = (RequestSwitch) nodeFactory.create("switch");
//	    sw0.setCpu(20);
//	    sw0.setMemory(20);
//	    sw0.setVlans(10);
	    // sw1
	    RequestSwitch sw1 = (RequestSwitch) nodeFactory.create("switch");
//	    sw1.setCpu(20);
//	    sw1.setMemory(20);
//	    sw1.setVlans(10);
	    // sw2
	    RequestSwitch sw2 = (RequestSwitch) nodeFactory.create("switch");
//	    sw2.setCpu(20);
//	    sw2.setMemory(20);
//	    sw2.setVlans(10);
	    // vm0
	    VirtualMachine vm0 = (VirtualMachine) nodeFactory.create("virtualMachine");
//	    vm0.setCpu(20);
//	    vm0.setMemory(20);
//	    vm0.setDiskSpace(20);
	    // vm1
	    VirtualMachine vm1 = (VirtualMachine) nodeFactory.create("virtualMachine");
//	    vm1.setCpu(20);
//	    vm1.setMemory(20);
//	    vm1.setDiskSpace(20);
	    // vm2
	    VirtualMachine vm2 = (VirtualMachine) nodeFactory.create("virtualMachine");
//	    vm2.setCpu(20);
//	    vm2.setMemory(20);
//	    vm2.setDiskSpace(20);
	    // vm3
	    VirtualMachine vm3 = (VirtualMachine) nodeFactory.create("virtualMachine");
//	    vm3.setCpu(20);
//	    vm3.setMemory(20);
//	    vm3.setDiskSpace(20);
	    // vm4
	    VirtualMachine vm4 = (VirtualMachine) nodeFactory.create("virtualMachine");
//	    vm4.setCpu(20);
//	    vm4.setMemory(20);
//	    vm4.setDiskSpace(20);
	    // vm5
	    VirtualMachine vm5 = (VirtualMachine) nodeFactory.create("virtualMachine");
//	    vm5.setCpu(20);
//	    vm5.setMemory(20);
//	    vm5.setDiskSpace(20);
	    // vm6
	    VirtualMachine vm6 = (VirtualMachine) nodeFactory.create("virtualMachine");
//	    vm6.setCpu(20);
//	    vm6.setMemory(20);
//	    vm6.setDiskSpace(20);
	    // vm7
	    VirtualMachine vm7 = (VirtualMachine) nodeFactory.create("virtualMachine");
//	    vm7.setCpu(20);
//	    vm7.setMemory(20);
//	    vm7.setDiskSpace(20);

	    // Adding Links with random bw
	    //vm0-sw0
	    RequestLink requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(0,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(vm0,sw0), EdgeType.UNDIRECTED);
	    //vm1-sw0
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(1,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(vm1,sw0), EdgeType.UNDIRECTED);
	    //vm2-sw1
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(2,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(vm2,sw1), EdgeType.UNDIRECTED);
	    //vm3-sw1
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(3,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(vm3,sw1), EdgeType.UNDIRECTED);
	    //vm4-sw2
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(4,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(vm4,sw2), EdgeType.UNDIRECTED);
	    //vm5-sw2
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(5,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(vm5,sw2), EdgeType.UNDIRECTED);
	    //vm6-r1
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(6,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(vm6,r1), EdgeType.UNDIRECTED);
	    //vm7-r1
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(7,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(vm7,r1), EdgeType.UNDIRECTED);
	    //r0-r1
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(8,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(r0,r1), EdgeType.UNDIRECTED);
	    //r0-sw0
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(9,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(r0,sw0), EdgeType.UNDIRECTED);
	    //r0-sw1
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(10,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(r0,sw1), EdgeType.UNDIRECTED);
	    //r0-sw2
	    requestLink = (RequestLink) linkFactory.create();
//	    requestLink = new RequestLink(11,20);
	    request.getGraph().addEdge(requestLink,new Pair<Node>(r0,sw2), EdgeType.UNDIRECTED);
	    
	    
	    // Hardcoded FEDERICA Substrate
	    /** Portugal (FCCN)**/
	    // sw1.lis.pt
	    SubstrateSwitch sw1LisPt = new SubstrateSwitch(0);
	    sw1LisPt.setName("sw1.lis.pt");
	    sw1LisPt.setLocation(Location.Portugal);
	    sw1LisPt.setCpu(100);
	    sw1LisPt.setMemory(100);
	    sw1LisPt.setVlans(SimulatorConstants.MAX_SWITCH_VLANS);
	    // vnode1.lis.pt
	    Server vnode1LisPt = new Server(1);
	    vnode1LisPt.setName("vnode1.lis.pt");
	    vnode1LisPt.setLocation(Location.Portugal);
	    vnode1LisPt.setCpu(100);
	    vnode1LisPt.setMemory(100);
	    vnode1LisPt.setDiskSpace(100);
	    vnode1LisPt.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    /** Spain - Madrid (RedIRIS) **/
	    // sw1.mad.es
	    SubstrateSwitch sw1MadEs = new SubstrateSwitch(2);
	    sw1MadEs.setName("sw1.mad.es");
	    sw1MadEs.setLocation(Location.Spain);
	    sw1MadEs.setCpu(100);
	    sw1MadEs.setMemory(100);
	    sw1MadEs.setVlans(SimulatorConstants.MAX_SWITCH_VLANS);
	    // vnode1.mad.es
	    Server vnode1MadEs = new Server(3);
	    vnode1MadEs.setName("vnode1.mad.es");
	    vnode1MadEs.setLocation(Location.Spain);
	    vnode1MadEs.setCpu(100);
	    vnode1MadEs.setMemory(100);
	    vnode1MadEs.setDiskSpace(100);
	    vnode1MadEs.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    /** Spain - Barcelona (i2CAT) **/
	    // sw1.bar.es
	    SubstrateSwitch sw1BarEs = new SubstrateSwitch(4);
	    sw1BarEs.setName("sw1.bar.es");
	    sw1BarEs.setLocation(Location.Spain);
	    sw1BarEs.setCpu(100);
	    sw1BarEs.setMemory(100);
	    sw1BarEs.setVlans(SimulatorConstants.MAX_SWITCH_VLANS);
	    // vnode1.bar.es
	    Server vnode1BarEs = new Server(5);
	    vnode1BarEs.setName("vnode1.bar.es");
	    vnode1BarEs.setLocation(Location.Spain);
	    vnode1BarEs.setCpu(100);
	    vnode1BarEs.setMemory(100);
	    vnode1BarEs.setDiskSpace(100);
	    vnode1BarEs.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    // vnode2.bar.es
	    Server vnode2BarEs = new Server(6);
	    vnode2BarEs.setName("vnode2.bar.es");
	    vnode2BarEs.setLocation(Location.Spain);
	    vnode2BarEs.setCpu(100);
	    vnode2BarEs.setMemory(100);
	    vnode2BarEs.setDiskSpace(100);
	    vnode2BarEs.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    /** Ireland (HEANet) **/
	    // sw1.dub.ie
	    SubstrateSwitch sw1DubIe = new SubstrateSwitch(7);
	    sw1DubIe.setName("sw1.dub.ie");
	    sw1DubIe.setLocation(Location.Ireland);
	    sw1DubIe.setCpu(100);
	    sw1DubIe.setMemory(100);
	    sw1DubIe.setVlans(SimulatorConstants.MAX_SWITCH_VLANS);
	    // vnode1.dub.ie
	    Server vnode1DubIe = new Server(8);
	    vnode1DubIe.setName("vnode1.dub.ie");
	    vnode1DubIe.setLocation(Location.Ireland);
	    vnode1DubIe.setCpu(100);
	    vnode1DubIe.setMemory(100);
	    vnode1DubIe.setDiskSpace(100);
	    vnode1DubIe.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    /** Greece (GRNET) **/
	    // sw1.eie.gr
	    SubstrateSwitch sw1EieGr = new SubstrateSwitch(9);
	    sw1EieGr.setName("sw1.eie.gr");
	    sw1EieGr.setLocation(Location.Greece);
	    sw1EieGr.setCpu(100);
	    sw1EieGr.setMemory(100);
	    sw1EieGr.setVlans(SimulatorConstants.MAX_SWITCH_VLANS);
	    // sw1.ntu.gr
	    SubstrateSwitch sw1NtuGr = new SubstrateSwitch(10);
	    sw1NtuGr.setName("sw1.ntu.gr");
	    sw1NtuGr.setLocation(Location.Greece);
	    sw1NtuGr.setCpu(100);
	    sw1NtuGr.setMemory(100);
	    sw1NtuGr.setVlans(SimulatorConstants.MAX_SWITCH_VLANS);
	    // vnode1.ntu.ie
	    Server vnode1NtuGr = new Server(11);
	    vnode1NtuGr.setName("vnode1.ntu.ie");
	    vnode1NtuGr.setLocation(Location.Greece);
	    vnode1NtuGr.setCpu(100);
	    vnode1NtuGr.setMemory(100);
	    vnode1NtuGr.setDiskSpace(100);
	    vnode1NtuGr.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    /** Italy (GARR) **/
	    // r1.mil.it
	    SubstrateRouter r1MilIt = new SubstrateRouter(12);
	    r1MilIt.setName("r1.mil.it");
	    r1MilIt.setLocation(Location.Italy);
	    r1MilIt.setCpu(100);
	    r1MilIt.setMemory(100);
	    r1MilIt.setVlans(SimulatorConstants.MAX_ROUTER_VLANS);
	    // vnode1.mil.it
	    Server vnode1MilIt = new Server(13);
	    vnode1MilIt.setName("vnode1.mil.it");
	    vnode1MilIt.setLocation(Location.Italy);
	    vnode1MilIt.setCpu(100);
	    vnode1MilIt.setMemory(100);
	    vnode1MilIt.setDiskSpace(100);
	    vnode1MilIt.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    // vnode2.mil.it
	    Server vnode2MilIt = new Server(14);
	    vnode2MilIt.setName("vnode2.mil.it");
	    vnode2MilIt.setLocation(Location.Italy);
	    vnode2MilIt.setCpu(100);
	    vnode2MilIt.setMemory(100);
	    vnode2MilIt.setDiskSpace(100);
	    vnode2MilIt.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    /** Switzerland (SWITCH) **/
	    // sw1.gen.ch
	    SubstrateSwitch sw1GenCh = new SubstrateSwitch(15);
	    sw1GenCh.setName("sw1.gen.ch");
	    sw1GenCh.setLocation(Location.Switzerland);
	    sw1GenCh.setCpu(100);
	    sw1GenCh.setMemory(100);
	    sw1GenCh.setVlans(SimulatorConstants.MAX_SWITCH_VLANS);
	    // vnode1.gen.ch
	    Server vnode1GenCh = new Server(16);
	    vnode1GenCh.setName("vnode1.gen.ch");
	    vnode1GenCh.setLocation(Location.Switzerland);
	    vnode1GenCh.setCpu(100);
	    vnode1GenCh.setMemory(100);
	    vnode1GenCh.setDiskSpace(100);
	    vnode1GenCh.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    /** Hungary (HUNGARNET) **/
	    // sw1.bud.hu
	    SubstrateSwitch sw1BudHu = new SubstrateSwitch(17);
	    sw1BudHu.setName("sw1.bud.hu");
	    sw1BudHu.setLocation(Location.Hungary);
	    sw1BudHu.setCpu(100);
	    sw1BudHu.setMemory(100);
	    sw1BudHu.setVlans(SimulatorConstants.MAX_SWITCH_VLANS);
	    // vnode1.bud.hu
	    Server vnode1BudHu = new Server(18);
	    vnode1BudHu.setName("vnode1.bud.hu");
	    vnode1BudHu.setLocation(Location.Hungary);
	    vnode1BudHu.setCpu(100);
	    vnode1BudHu.setMemory(100);
	    vnode1BudHu.setDiskSpace(100);
	    vnode1BudHu.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    /** Germany (DFN) **/
	    // r1.erl.de
	    SubstrateRouter r1ErlDe = new SubstrateRouter(19);
	    r1ErlDe.setName("r1.erl.de");
	    r1ErlDe.setLocation(Location.Germany);
	    r1ErlDe.setCpu(100);
	    r1ErlDe.setMemory(100);
	    r1ErlDe.setVlans(SimulatorConstants.MAX_ROUTER_VLANS);
	    // vnode1.erl.de
	    Server vnode1ErlDe = new Server(20);
	    vnode1ErlDe.setName("vnode1.erl.de");
	    vnode1ErlDe.setLocation(Location.Germany);
	    vnode1ErlDe.setCpu(100);
	    vnode1ErlDe.setMemory(100);
	    vnode1ErlDe.setDiskSpace(100);
	    vnode1ErlDe.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    // vnode2.erl.de
	    Server vnode2ErlDe = new Server(21);
	    vnode2ErlDe.setName("vnode2.erl.de");
	    vnode2ErlDe.setLocation(Location.Germany);
	    vnode2ErlDe.setCpu(100);
	    vnode2ErlDe.setMemory(100);
	    vnode2ErlDe.setDiskSpace(100);
	    vnode2ErlDe.setVlans(SimulatorConstants.MAX_SERVER_VLANS);	    
	    /** Czech Republic (CESNET) **/
	    // r1.pra.cz
	    SubstrateRouter r1PraCz = new SubstrateRouter(22);
	    r1PraCz.setName("r1.pra.cz");
	    r1PraCz.setLocation(Location.Czech_Republic);
	    r1PraCz.setCpu(100);
	    r1PraCz.setMemory(100);
	    r1PraCz.setVlans(SimulatorConstants.MAX_ROUTER_VLANS);	    
	    // vnode1.pra.cz
	    Server vnode1PraCz = new Server(23);
	    vnode1PraCz.setName("vnode1.pra.cz");
	    vnode1PraCz.setLocation(Location.Czech_Republic);
	    vnode1PraCz.setCpu(100);
	    vnode1PraCz.setMemory(100);
	    vnode1PraCz.setDiskSpace(100);
	    vnode1PraCz.setVlans(SimulatorConstants.MAX_SERVER_VLANS);	    
	    // vnode2.pra.cz
	    Server vnode2PraCz = new Server(24);
	    vnode2PraCz.setName("vnode2.pra.cz");
	    vnode2PraCz.setLocation(Location.Czech_Republic);
	    vnode2PraCz.setCpu(100);
	    vnode2PraCz.setMemory(100);
	    vnode2PraCz.setDiskSpace(100);
	    vnode2PraCz.setVlans(SimulatorConstants.MAX_SERVER_VLANS);	    
	    /** Poland (PSNC) **/
	    // r1.poz.pl
	    SubstrateRouter r1PozPl = new SubstrateRouter(25);
	    r1PozPl.setName("r1.poz.pl");
	    r1PozPl.setLocation(Location.Poland);
	    r1PozPl.setCpu(100);
	    r1PozPl.setMemory(100);
	    r1PozPl.setVlans(SimulatorConstants.MAX_ROUTER_VLANS);	
	    // vnode1.poz.pl
	    Server vnode1PozPl = new Server(26);
	    vnode1PozPl.setName("vnode1.poz.pl");
	    vnode1PozPl.setLocation(Location.Poland);
	    vnode1PozPl.setCpu(100);
	    vnode1PozPl.setMemory(100);
	    vnode1PozPl.setDiskSpace(100);
	    vnode1PozPl.setVlans(SimulatorConstants.MAX_SERVER_VLANS);	    
	    // vnode2.poz.pl
	    Server vnode2PozPl = new Server(27);
	    vnode2PozPl.setName("vnode2.poz.pl");
	    vnode2PozPl.setLocation(Location.Poland);
	    vnode2PozPl.setCpu(100);
	    vnode2PozPl.setMemory(100);
	    vnode2PozPl.setDiskSpace(100);
	    vnode2PozPl.setVlans(SimulatorConstants.MAX_SERVER_VLANS);
	    // vnode3.poz.pl
	    Server vnode3PozPl = new Server(28);
	    vnode3PozPl.setName("vnode3.poz.pl");
	    vnode3PozPl.setLocation(Location.Poland);
	    vnode3PozPl.setCpu(100);
	    vnode3PozPl.setMemory(100);
	    vnode3PozPl.setDiskSpace(100);
	    vnode3PozPl.setVlans(SimulatorConstants.MAX_SERVER_VLANS);	
	    // vnode4.poz.pl
	    Server vnode4PozPl = new Server(29);
	    vnode4PozPl.setName("vnode4.poz.pl");
	    vnode4PozPl.setLocation(Location.Poland);
	    vnode4PozPl.setCpu(100);
	    vnode4PozPl.setMemory(100);
	    vnode4PozPl.setDiskSpace(100);
	    vnode4PozPl.setVlans(SimulatorConstants.MAX_SERVER_VLANS);	
	    /** Sweden (KTH) **/
	    // sw1.sth.se
	    SubstrateSwitch sw1SthSe = new SubstrateSwitch(30);
	    sw1SthSe.setName("sw1.sth.se");
	    sw1SthSe.setLocation(Location.Sweden);
	    sw1SthSe.setCpu(100);
	    sw1SthSe.setMemory(100);
	    sw1SthSe.setVlans(SimulatorConstants.MAX_SWITCH_VLANS);
	    // vnode1.sth.se
	    Server vnode1SthSe = new Server(31);
	    vnode1SthSe.setName("vnode1.sth.se");
	    vnode1SthSe.setLocation(Location.Sweden);
	    vnode1SthSe.setCpu(100);
	    vnode1SthSe.setMemory(100);
	    vnode1SthSe.setDiskSpace(100);
	    vnode1SthSe.setVlans(SimulatorConstants.MAX_SERVER_VLANS);	    
	    // vnode2.sth.se
	    Server vnode2SthSe = new Server(32);
	    vnode2SthSe.setName("vnode2.sth.se");
	    vnode2SthSe.setLocation(Location.Sweden);
	    vnode2SthSe.setCpu(100);
	    vnode2SthSe.setMemory(100);
	    vnode2SthSe.setDiskSpace(100);
	    vnode2SthSe.setVlans(SimulatorConstants.MAX_SERVER_VLANS);	    
	    
	   
	    // Adding links & interfaces
	    // sw1.lis.pt - vnode1.lis.pt
	    SubstrateLink link = new SubstrateLink(0,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1LisPt,vnode1LisPt), EdgeType.UNDIRECTED);
	    
	    // sw1.lis.pt - sw1.mad.es
	    link = new SubstrateLink(1,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1LisPt,sw1MadEs), EdgeType.UNDIRECTED);
	    
	    // vnode1.mad.es - sw1.mad.es (1)
	    link = new SubstrateLink(2,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1MadEs,vnode1MadEs), EdgeType.UNDIRECTED);
	    
	    // vnode1.mad.es - sw1.mad.es (2)
	    link = new SubstrateLink(3,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1MadEs,vnode1MadEs), EdgeType.UNDIRECTED);
	    
	    // vnode1.mad.es - sw1.mad.es (3)
	    link = new SubstrateLink(4,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1MadEs,vnode1MadEs), EdgeType.UNDIRECTED);
	    
	    // sw1.mad.es - sw1.bar.es (1)
	    link = new SubstrateLink(5,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1MadEs,sw1BarEs), EdgeType.UNDIRECTED);
	    
	    // sw1.mad.es - sw1.bar.es (2)
	    link = new SubstrateLink(6,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1MadEs,sw1BarEs), EdgeType.UNDIRECTED);
	    
	    // vnode1.bar.es - sw1.bar.es
	    link = new SubstrateLink(7,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode1BarEs,sw1BarEs), EdgeType.UNDIRECTED);
	    
	    // vnode2.bar.es - sw1.bar.es
	    link = new SubstrateLink(8,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode2BarEs,sw1BarEs), EdgeType.UNDIRECTED);	    
	    
	    // sw1.mad.es - sw1.ntu.gr
	    link = new SubstrateLink(9,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1MadEs,sw1NtuGr), EdgeType.UNDIRECTED);
	    
	    // sw1.mad.es - sw1.dub.ie
	    link = new SubstrateLink(10,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1MadEs,sw1DubIe), EdgeType.UNDIRECTED);	    

	    // sw1.mad.es - r1.mil.it
	    link = new SubstrateLink(11,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1MadEs,r1MilIt), EdgeType.UNDIRECTED);
	    
	    // sw1.ntu.gr - vnode1.ntu.gr
	    link = new SubstrateLink(12,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode1NtuGr,sw1NtuGr), EdgeType.UNDIRECTED);
	    
	    // sw1.ntu.gr - r1.pra.cz
	    link = new SubstrateLink(13,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1PraCz,sw1NtuGr), EdgeType.UNDIRECTED);	    
	    
	    // sw1.eie.gr - sw1.bud.hu
	    link = new SubstrateLink(14,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1BudHu,sw1EieGr), EdgeType.UNDIRECTED);	    
	    
	    // sw1.bud.hu - vnode1.bud.hu (1)
	    link = new SubstrateLink(15,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1BudHu,vnode1BudHu), EdgeType.UNDIRECTED);	    
	    
	    // sw1.bud.hu - vnode1.bud.hu (2)
	    link = new SubstrateLink(16,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1BudHu,vnode1BudHu), EdgeType.UNDIRECTED);	
	    
	    // sw1.bud.hu - vnode1.bud.hu (3)
	    link = new SubstrateLink(17,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1BudHu,vnode1BudHu), EdgeType.UNDIRECTED);	
	    
	    // sw1.bud.hu - sw1.gen.ch
	    link = new SubstrateLink(18,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1BudHu,sw1GenCh), EdgeType.UNDIRECTED);	    
	
	    // sw1.gen.ch - vnode1.gen.ch
	    link = new SubstrateLink(19,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode1GenCh,sw1GenCh), EdgeType.UNDIRECTED);
	    
	    // sw1.gen.ch - r1.erl.de
	    link = new SubstrateLink(20,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1ErlDe,sw1GenCh), EdgeType.UNDIRECTED);	    
	    
	    // sw1.gen.ch - sw1.dub.ie
	    link = new SubstrateLink(21,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1DubIe,sw1GenCh), EdgeType.UNDIRECTED);	    
	    
	    // sw1.dub.ie - vnode1.dub.ie
	    link = new SubstrateLink(22,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1DubIe,vnode1DubIe), EdgeType.UNDIRECTED);    
	    
	    // sw1.dub.ie - sw1.sth.se
	    link = new SubstrateLink(23,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(sw1DubIe,sw1SthSe), EdgeType.UNDIRECTED);	    
	    
	    // sw1.sth.se - vnode1.sth.se
	    link = new SubstrateLink(24,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode1SthSe,sw1SthSe), EdgeType.UNDIRECTED);	    
	    
	    // sw1.sth.se - vnode2.sth.se
	    link = new SubstrateLink(25,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode2SthSe,sw1SthSe), EdgeType.UNDIRECTED);	    
	    
	    // sw1.sth.se - r1.poz.pl
	    link = new SubstrateLink(25,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1PozPl,sw1SthSe), EdgeType.UNDIRECTED);    
	    
	    // r1.mil.it - vnode1.mil.it
	    link = new SubstrateLink(26,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1MilIt,vnode1MilIt), EdgeType.UNDIRECTED);    
	    
	    // r1.mil.it - vnode2.mil.it
	    link = new SubstrateLink(27,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1MilIt,vnode2MilIt), EdgeType.UNDIRECTED); 	    
	    
	    // r1.mil.it - r1.poz.pl
	    link = new SubstrateLink(28,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1MilIt,r1PozPl), EdgeType.UNDIRECTED); 
	    
	    // r1.mil.it - r1.pra.cz
	    link = new SubstrateLink(29,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1MilIt,r1PraCz), EdgeType.UNDIRECTED);
	    
	    // r1.pra.cz - vnode1.pra.cz
	    link = new SubstrateLink(30,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode1PraCz,r1PraCz), EdgeType.UNDIRECTED);	    
	    
	    // r1.pra.cz - vnode2.pra.cz
	    link = new SubstrateLink(31,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode2PraCz,r1PraCz), EdgeType.UNDIRECTED);    
	    
	    // r1.pra.cz - r1.poz.pl
	    link = new SubstrateLink(32,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1PozPl,r1PraCz), EdgeType.UNDIRECTED);    
	    
	    // r1.pra.cz - r1.erl.de
	    link = new SubstrateLink(33,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1ErlDe,r1PraCz), EdgeType.UNDIRECTED);	    
	    
	    // r1.erl.de - vnode1.erl.de
	    link = new SubstrateLink(34,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1ErlDe,vnode1ErlDe), EdgeType.UNDIRECTED); 
	    
	    // r1.erl.de - vnode2.erl.de
	    link = new SubstrateLink(35,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1ErlDe,vnode2ErlDe), EdgeType.UNDIRECTED);   
	    
	    // r1.erl.de - r1.poz.pl
	    link = new SubstrateLink(36,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1ErlDe,r1PozPl), EdgeType.UNDIRECTED);	    
	    
	    // r1.poz.pl - vnode1.poz.pl
	    link = new SubstrateLink(37,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode1PozPl,r1PozPl), EdgeType.UNDIRECTED);  
	    
	    // r1.poz.pl - vnode2.poz.pl
	    link = new SubstrateLink(38,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode2PozPl,r1PozPl), EdgeType.UNDIRECTED);
	    
	    // r1.poz.pl - vnode3.poz.pl
	    link = new SubstrateLink(39,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode3PozPl,r1PozPl), EdgeType.UNDIRECTED);
	    
	    // r1.poz.pl - vnode4.poz.pl
	    link = new SubstrateLink(40,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(vnode4PozPl,r1PozPl), EdgeType.UNDIRECTED);
	    
	    // r1.erl.de - r1.mil.it
	    link = new SubstrateLink(41,100);
	    substrate.getGraph().addEdge(link,new Pair<Node>(r1ErlDe,r1MilIt), EdgeType.UNDIRECTED);
	    
	    // Testing getCopy()
//	    Substrate fedeCopy = (Substrate) substrate.getCopy();
//	    System.out.println("Copy of FEDE: "+fedeCopy.getId());
//	    Request copyOfFedeReq = (Request) request.getCopy();
//	    System.out.println("Copy of FEDE req: "+copyOfFedeReq.getId());
	    
	    // Creating simulation
	    Simulation simulation = new Simulation(substrate, requests, algorithm);
	    launchLaunchSimulation(simulation);
	    
	}
	
	private static void launchLaunchSimulation(Simulation simulation) {
		int ret = 0;
		List<Request> requests = simulation.getRequests();
		Substrate substrate = simulation.getSubstrate();
		Algorithm algorithm = simulation.getAlgorithm();
		//chrisap
		algorithm.addSubstrate(substrate);
		algorithm.addRequests(requests);
		algorithm.runAlgorithm();
	}
	
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 